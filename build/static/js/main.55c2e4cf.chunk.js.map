{"version":3,"sources":["SearchCity.js","ViewWeather.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","props","className","onSubmit","submit","type","value","onChange","change","placeholder","ViewWeather","weather","city","country","date","temp","minTemp","maxTemp","pressure","humidity","wind","coord_lat","coord_lon","error","info","toUpperCase","output","App","state","handleChange","e","setState","target","handleSubmit","preventDefault","API","axios","get","then","resp","data","time","Date","toLocaleString","sys","main","temp_min","temp_max","speed","coord","lat","lon","catch","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55c2e4cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nconst SearchCity = (props) => {\r\n    return (\r\n        <form className=\"container\" onSubmit={props.submit}>\r\n            <div className=\"row mb-5 px-5\">\r\n                <div className=\"col-9\">\r\n                    <input type=\"text\" className='w-75 h-100 px-2 input-font-size' value={props.value} onChange={props.change} placeholder=\"Proszę wpisać miasto...\"/>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                    <button className='btn btn-primary btn-lg'>Sprawdź pogodę</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchCity;","import React from 'react';\r\nimport './App.css';\r\n\r\nconst ViewWeather = (props) => {\r\n    const {\r\n\r\n        city,\r\n        country,\r\n        date,\r\n        temp,\r\n        minTemp,\r\n        maxTemp,\r\n        pressure,\r\n        humidity,\r\n        wind,\r\n        weather,\r\n        coord_lat,\r\n        coord_lon,\r\n        error\r\n    } = props.weather\r\n\r\nconst info = (\r\n    <div className=\"row\">\r\n    <h2 className='col-12 p-3 text-warning bg-secondary text-center'>Nie posiadamy w bazie danych miasta <span className= 'text-danger px-2'>{city.toUpperCase()}</span></h2>\r\n    </div>\r\n)\r\n\r\n    let output = null;\r\n\r\n   \r\n\r\n    if (!error && city) {\r\n        output = (\r\n            \r\n            <div className=\"container text-center\">\r\n            <div className=\"cards py-5 p-5 card-color\">\r\n            <div className=\"row\">\r\n                <h1 className='col-6 text-center text-success'>{city.toUpperCase()}</h1>\r\n                <h1 className='col-6'>{country.toUpperCase()}</h1>\r\n                </div>\r\n                <div className=\"row\"> \r\n                <h2 className='py-4 col-6'>{date}</h2>\r\n                <h2 className='py-4 col-6'>Temperatura: {temp}&deg;C</h2>\r\n                </div>\r\n                <div>{weather}</div>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col-6\">\r\n                <h4>Minimalna temperatura: <span className=\"text-danger\">{minTemp}&deg;C</span></h4>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                <h4>Maksymalna temperatura: <span className=\"text-success\">{maxTemp}&deg;C</span></h4>\r\n                </div>\r\n                </div>\r\n                <div className=\"row mb-2\">\r\n                <div className=\"col-6\">\r\n                <h4>Ciśnienie atmosferyczne: {pressure}HPa</h4>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                <h4>Wilgotność powietrza: {humidity}%</h4>\r\n                </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                <h4>Siła wiatru: {wind}m/s</h4>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                <h4>Koordynaty: {coord_lat}N, {coord_lon}E</h4>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>{error ? info: output}</div>\r\n    );\r\n}\r\n\r\nexport default ViewWeather;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchCity from \"./SearchCity\";\nimport ViewWeather from \"./ViewWeather\";\nimport axios from 'axios';\n\n\nclass App extends Component {\n  state = {\n    value: '',\n    date: '',\n    country: '',\n    city: '',\n    temp: '',\n    minTemp: '',\n    maxTemp: '',\n    pressure: '',\n    humidity: '',\n    wind: '',\n    coord_lat: '',\n    coord_lon: '',\n    error: false,\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      value: e.target.value,\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=05508bb378ad891b493b0c886cca7a57&units=metric&lang=pl`;\n    axios.get(API)\n      .then(resp => resp.data)\n      .then(data => {\n        const time = new Date().toLocaleString();\n        const { value } = this.state;\n        this.setState({\n          error: false,\n          date: time,\n          city: value,\n          country: data.sys.country,\n          temp: data.main.temp,\n          minTemp: data.main.temp_min,\n          maxTemp: data.main.temp_max,\n          pressure: data.main.pressure,\n          humidity: data.main.humidity,\n          wind: data.wind.speed,\n          coord_lat: data.coord.lat,\n          coord_lon: data.coord.lon,\n          value:''\n\n        })\n      })\n      .catch(error => {\n        console.log(error);\n        const { value } = this.state;\n        this.setState({\n          error: true,\n          city: value,\n        })\n      })\n\n  }\n\n  render() {\n    const {value}=this.state;\n    return (\n      <>\n      <div className=\"main-container p-4 \">\n      <div className=\"row\">\n      <h1 className='col-12 my-5 text-center'>Aplikacja pogodowa 2019</h1>\n      </div>\n        <SearchCity value={value} change={this.handleChange} submit={this.handleSubmit} />\n        <ViewWeather weather={this.state} />\n      </div>\n      </>\n    );\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}